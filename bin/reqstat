#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import sys
import json
import time
import socket
import argparse
import shutil
import datetime
import logging as log
import urllib.request

from prometheus_client.parser import text_string_to_metric_families

from reqstat import config as rconf

def get_metrics(port=9071):
    contents = urllib.request.urlopen("http://localhost:{}/metrics".format(port)).read()

    metrics = text_string_to_metric_families(contents.decode("utf-8"))

    return metrics

def print_metrics(metrics):
    for family in metrics:
      for sample in family.samples:

        # Skip default process_* metrics
        if sample[0].startswith("process_"):
            continue

        print("{0}{1} {2}".format(*sample))

def main():
    log.basicConfig(
        format="{}: %(levelname)s: %(message)s".format(os.path.basename(__file__))
    )

    parser = argparse.ArgumentParser()
    parser.add_argument("--version", action="version", version="%(prog)s 0.0.1",
                        help="print program version")
    parser.add_argument("--config", metavar="CONFIG", type=str, default="/etc/reqstat/reqstat.yml",
                        help="path to config file")
    args = parser.parse_args()

    try:
        config = rconf.load(args.config)
    except rconf.ConfigError as e:
        log.error(str(e))
        sys.exit(1)

    t_width, t_height = shutil.get_terminal_size((80, 20))

    try:
        metrics = get_metrics(config["global"]["metrics"]["port"])
        print_metrics(metrics)
    except Exception as e:
        log.error(str(e))
    except KeyboardInterrupt:
        pass

if __name__ == "__main__":
    main()
