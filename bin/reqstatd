#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import sys
import re
import json
import time
import argparse
import socket
import signal

import queue
from multiprocessing.pool import ThreadPool

from reqstat import config as rconf
from reqstat import logprocessor

def print_error(*message):
    print("{}: {}" .format(os.path.basename(__file__),
                           ": ".join(list(message))),
                           file=sys.stderr)

def format_stats(stats):
    json.encoder.FLOAT_REPR = lambda o: format(o, '.2f')

    return json.dumps(stats, indent=4, sort_keys=False)

def print_stats(stats):
    print(format_stats(stats))

def write_stats(stats, path="./stats.json"):
    with open(path, "w") as f:
        f.write(format_stats(stats))
        f.write("\n")

def handler(signum, frame):
    print('Signal handler called with signal', signum)

def start_workers(workers_pool, threads, q, regex, syslog):
    workers = []

    for i in range(threads):
        workers += [workers_pool.apply_async(logprocessor.process_queue, (q, regex, syslog))]

    return workers

def stop_workers(workers, q, stats):
    # Stop workers
    for w in workers:
        q.put(None)

    # Receive stats from workers
    for w in workers:
        t_stats = w.get()

        for k in t_stats.keys():
            if not k in stats:
                stats[k] = 0
            stats[k] += t_stats[k]

    return stats

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--version", action="version", version="%(prog)s 0.0.1",
                        help="print program version")
    parser.add_argument("--config", metavar="CONFIG", type=str, default="/etc/reqstat/reqstat.yml",
                        help="path to config file")
    parser.add_argument("--ip", metavar="IP", type=str, default="127.0.0.1",
                        help="IP address for listening syslog messages")
    parser.add_argument("--port", metavar="PORT", type=int,
                        help="port for listening syslog messages")
    args = parser.parse_args()

    try:
        config = rconf.load(args.config)
    except rconf.ConfigError as e:
        print_error(str(e))
        sys.exit(1)

    # Receive signals
    signal.signal(signal.SIGUSR1, handler)

    stats = {}

    syslog = False
    if args.port:
        syslog = True

    q = queue.Queue()
    workers_pool = ThreadPool(processes=config["worker"]["threads"])
    workers = start_workers(workers_pool, config["worker"]["threads"], q, config["log"]["regex"], syslog)

    reader_pool = ThreadPool(processes=1)
    reader = reader_pool.apply_async(logprocessor.receive_messages, (q, args.ip, args.port))

    if os.path.exists(config["socket"]):
        os.remove(config["socket"])

    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    sock.bind(config["socket"])
    sock.listen(1)

    try:
        while True:
            connection, client_address = sock.accept()

            data = connection.recv(1024)
            if not data:
                break
            command = data.decode("utf-8").strip()

            if command == "stats":
                stats = stop_workers(workers, q, stats)
                workers = start_workers(workers_pool, config["worker"]["threads"], q, config["log"]["regex"], syslog)
                connection.sendall(format_stats(stats).encode("utf-8"))

            elif command == "shutdown":
                raise KeyboardInterrupt

            connection.close()

    except (EOFError, KeyboardInterrupt):
        pass

    sock.close()
    os.remove(config["socket"])

    stats = stop_workers(workers, q, stats)

    # for t in workers:
    #     t.join()

if __name__ == "__main__":
    main()
