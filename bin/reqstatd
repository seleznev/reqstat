#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import sys
import time
import argparse
import socket
import logging as log

from prometheus_client import start_http_server

from reqstat import utils
from reqstat import config as rconf
from reqstat.logstat import LogStat

def main():
    log.basicConfig(format="%(levelname)s: %(message)s")

    parser = argparse.ArgumentParser()
    parser.add_argument("--version", action="version", version="%(prog)s 0.0.1",
                        help="print program version")
    parser.add_argument("--config", metavar="CONFIG", type=str, default="/etc/reqstat/reqstat.yml",
                        help="path to config file")
    args = parser.parse_args()

    try:
        config = rconf.load(args.config) # parse and validate
    except rconf.ConfigError as e:
        log.error(e)
        sys.exit(1)

    # Runtume stats received from workers will be stored here
    stats = LogStat(config["metrics"])

    # Start expose metrics
    start_http_server(config["global"]["metrics"]["port"])

    # Receive syslog messages
    ip = config["input"]["listen"]["ip"]
    port = config["input"]["listen"]["port"]

    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    #sock.setsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF, 100*1024)
    sock.bind((ip, port))

    try:
        while True:
            data, addr = sock.recvfrom(1024) # buffer size is 1024 bytes
            entry = utils.parse_entry(data, regex=config["input"]["regex"])
            stats.insert(entry)
    except (EOFError, KeyboardInterrupt):
        pass

if __name__ == "__main__":
    main()
